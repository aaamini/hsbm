// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fit_dpsbm
arma::umat fit_dpsbm(arma::sp_mat& A, const double gam0, const double alpha, const double beta, const int niter, const int Zcap, const bool verb, const bool slice);
RcppExport SEXP _hsbm_fit_dpsbm(SEXP ASEXP, SEXP gam0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP niterSEXP, SEXP ZcapSEXP, SEXP verbSEXP, SEXP sliceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type gam0(gam0SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type Zcap(ZcapSEXP);
    Rcpp::traits::input_parameter< const bool >::type verb(verbSEXP);
    Rcpp::traits::input_parameter< const bool >::type slice(sliceSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_dpsbm(A, gam0, alpha, beta, niter, Zcap, verb, slice));
    return rcpp_result_gen;
END_RCPP
}
// fit_mult_dpsbm
List fit_mult_dpsbm(List A, const double gam0, const double alpha, const double beta, const int niter, const int Zcap, const bool verb, const bool slice);
RcppExport SEXP _hsbm_fit_mult_dpsbm(SEXP ASEXP, SEXP gam0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP niterSEXP, SEXP ZcapSEXP, SEXP verbSEXP, SEXP sliceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type gam0(gam0SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type Zcap(ZcapSEXP);
    Rcpp::traits::input_parameter< const bool >::type verb(verbSEXP);
    Rcpp::traits::input_parameter< const bool >::type slice(sliceSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_mult_dpsbm(A, gam0, alpha, beta, niter, Zcap, verb, slice));
    return rcpp_result_gen;
END_RCPP
}
// fit_hsbm
List fit_hsbm(List A, double beta0, double gam0, double alpha_eta, double beta_eta, int niter, int Kcap, int Gcap, bool verb, const bool rand_init, const bool seq_g_update);
RcppExport SEXP _hsbm_fit_hsbm(SEXP ASEXP, SEXP beta0SEXP, SEXP gam0SEXP, SEXP alpha_etaSEXP, SEXP beta_etaSEXP, SEXP niterSEXP, SEXP KcapSEXP, SEXP GcapSEXP, SEXP verbSEXP, SEXP rand_initSEXP, SEXP seq_g_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< double >::type gam0(gam0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_eta(alpha_etaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_eta(beta_etaSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type Kcap(KcapSEXP);
    Rcpp::traits::input_parameter< int >::type Gcap(GcapSEXP);
    Rcpp::traits::input_parameter< bool >::type verb(verbSEXP);
    Rcpp::traits::input_parameter< const bool >::type rand_init(rand_initSEXP);
    Rcpp::traits::input_parameter< const bool >::type seq_g_update(seq_g_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_hsbm(A, beta0, gam0, alpha_eta, beta_eta, niter, Kcap, Gcap, verb, rand_init, seq_g_update));
    return rcpp_result_gen;
END_RCPP
}
// update_eta
List update_eta(List Alist, NumericVector n, std::vector<arma::uvec> zb, double alpha_eta, double beta_eta, int Kcap);
RcppExport SEXP _hsbm_update_eta(SEXP AlistSEXP, SEXP nSEXP, SEXP zbSEXP, SEXP alpha_etaSEXP, SEXP beta_etaSEXP, SEXP KcapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Alist(AlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::uvec> >::type zb(zbSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_eta(alpha_etaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_eta(beta_etaSEXP);
    Rcpp::traits::input_parameter< int >::type Kcap(KcapSEXP);
    rcpp_result_gen = Rcpp::wrap(update_eta(Alist, n, zb, alpha_eta, beta_eta, Kcap));
    return rcpp_result_gen;
END_RCPP
}
// multsbm_gibbs_sampler_fast
arma::umat multsbm_gibbs_sampler_fast(arma::sp_mat A, const int K, const double alpha, const double beta, const int niter);
RcppExport SEXP _hsbm_multsbm_gibbs_sampler_fast(SEXP ASEXP, SEXP KSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(multsbm_gibbs_sampler_fast(A, K, alpha, beta, niter));
    return rcpp_result_gen;
END_RCPP
}
// sample_int
int sample_int(int N);
RcppExport SEXP _hsbm_sample_int(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int(N));
    return rcpp_result_gen;
END_RCPP
}
// sample_int_vec
arma::uvec sample_int_vec(int N, int size);
RcppExport SEXP _hsbm_sample_int_vec(SEXP NSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int_vec(N, size));
    return rcpp_result_gen;
END_RCPP
}
// stick_break
arma::vec stick_break(arma::vec x);
RcppExport SEXP _hsbm_stick_break(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stick_break(x));
    return rcpp_result_gen;
END_RCPP
}
// symmat_rbeta
arma::mat symmat_rbeta(arma::mat alpha, arma::mat beta);
RcppExport SEXP _hsbm_symmat_rbeta(SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(symmat_rbeta(alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// safe_exp
arma::vec safe_exp(arma::vec log_prob);
RcppExport SEXP _hsbm_safe_exp(SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(safe_exp(log_prob));
    return rcpp_result_gen;
END_RCPP
}
// my_sampler
int my_sampler(arma::vec prob_vec);
RcppExport SEXP _hsbm_my_sampler(SEXP prob_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type prob_vec(prob_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(my_sampler(prob_vec));
    return rcpp_result_gen;
END_RCPP
}
// sample_index
int sample_index(arma::vec prob);
RcppExport SEXP _hsbm_sample_index(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_index(prob));
    return rcpp_result_gen;
END_RCPP
}
// rgamma_vec
arma::vec rgamma_vec(arma::vec shape);
RcppExport SEXP _hsbm_rgamma_vec(SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(rgamma_vec(shape));
    return rcpp_result_gen;
END_RCPP
}
// rbeta_vec
arma::vec rbeta_vec(arma::vec alpha, arma::vec beta);
RcppExport SEXP _hsbm_rbeta_vec(SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rbeta_vec(alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// rdirichlet
arma::vec rdirichlet(arma::vec theta);
RcppExport SEXP _hsbm_rdirichlet(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet(theta));
    return rcpp_result_gen;
END_RCPP
}
// gem_gibbs_update
arma::vec gem_gibbs_update(const arma::uvec z, const int Zcap, const double concent_param);
RcppExport SEXP _hsbm_gem_gibbs_update(SEXP zSEXP, SEXP ZcapSEXP, SEXP concent_paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type Zcap(ZcapSEXP);
    Rcpp::traits::input_parameter< const double >::type concent_param(concent_paramSEXP);
    rcpp_result_gen = Rcpp::wrap(gem_gibbs_update(z, Zcap, concent_param));
    return rcpp_result_gen;
END_RCPP
}
// get_up_freq
arma::uvec get_up_freq(arma::uvec freq);
RcppExport SEXP _hsbm_get_up_freq(SEXP freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type freq(freqSEXP);
    rcpp_result_gen = Rcpp::wrap(get_up_freq(freq));
    return rcpp_result_gen;
END_RCPP
}
// find_tunc
int find_tunc(arma::vec beta, double threshold);
RcppExport SEXP _hsbm_find_tunc(SEXP betaSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(find_tunc(beta, threshold));
    return rcpp_result_gen;
END_RCPP
}
// fast_agg
arma::vec fast_agg(arma::vec x, arma::uvec z, int K);
RcppExport SEXP _hsbm_fast_agg(SEXP xSEXP, SEXP zSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_agg(x, z, K));
    return rcpp_result_gen;
END_RCPP
}
// get_freq
arma::uvec get_freq(arma::uvec z, int K);
RcppExport SEXP _hsbm_get_freq(SEXP zSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(get_freq(z, K));
    return rcpp_result_gen;
END_RCPP
}
// get_freq_minus_self
arma::umat get_freq_minus_self(arma::uvec z, int K);
RcppExport SEXP _hsbm_get_freq_minus_self(SEXP zSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(get_freq_minus_self(z, K));
    return rcpp_result_gen;
END_RCPP
}
// comp_blk_sums
arma::mat comp_blk_sums(arma::sp_mat At, arma::uvec z, int Kcap);
RcppExport SEXP _hsbm_comp_blk_sums(SEXP AtSEXP, SEXP zSEXP, SEXP KcapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type At(AtSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type Kcap(KcapSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_blk_sums(At, z, Kcap));
    return rcpp_result_gen;
END_RCPP
}
// sp_compress_col
arma::mat sp_compress_col(arma::sp_mat At, arma::uvec z, int Kcap);
RcppExport SEXP _hsbm_sp_compress_col(SEXP AtSEXP, SEXP zSEXP, SEXP KcapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type At(AtSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type Kcap(KcapSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_compress_col(At, z, Kcap));
    return rcpp_result_gen;
END_RCPP
}
// sp_single_col_compress
arma::vec sp_single_col_compress(arma::sp_mat A, int col_idx, arma::uvec z, int Kcap);
RcppExport SEXP _hsbm_sp_single_col_compress(SEXP ASEXP, SEXP col_idxSEXP, SEXP zSEXP, SEXP KcapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type col_idx(col_idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type Kcap(KcapSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_single_col_compress(A, col_idx, z, Kcap));
    return rcpp_result_gen;
END_RCPP
}
// comp_blk_sums_and_sizes
List comp_blk_sums_and_sizes(arma::sp_mat At, arma::uvec z, int Kcap, bool div_diag);
RcppExport SEXP _hsbm_comp_blk_sums_and_sizes(SEXP AtSEXP, SEXP zSEXP, SEXP KcapSEXP, SEXP div_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type At(AtSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type Kcap(KcapSEXP);
    Rcpp::traits::input_parameter< bool >::type div_diag(div_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_blk_sums_and_sizes(At, z, Kcap, div_diag));
    return rcpp_result_gen;
END_RCPP
}
// iter_over_sp_mat
void iter_over_sp_mat(arma::sp_mat At);
RcppExport SEXP _hsbm_iter_over_sp_mat(SEXP AtSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type At(AtSEXP);
    iter_over_sp_mat(At);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hsbm_fit_dpsbm", (DL_FUNC) &_hsbm_fit_dpsbm, 8},
    {"_hsbm_fit_mult_dpsbm", (DL_FUNC) &_hsbm_fit_mult_dpsbm, 8},
    {"_hsbm_fit_hsbm", (DL_FUNC) &_hsbm_fit_hsbm, 11},
    {"_hsbm_update_eta", (DL_FUNC) &_hsbm_update_eta, 6},
    {"_hsbm_multsbm_gibbs_sampler_fast", (DL_FUNC) &_hsbm_multsbm_gibbs_sampler_fast, 5},
    {"_hsbm_sample_int", (DL_FUNC) &_hsbm_sample_int, 1},
    {"_hsbm_sample_int_vec", (DL_FUNC) &_hsbm_sample_int_vec, 2},
    {"_hsbm_stick_break", (DL_FUNC) &_hsbm_stick_break, 1},
    {"_hsbm_symmat_rbeta", (DL_FUNC) &_hsbm_symmat_rbeta, 2},
    {"_hsbm_safe_exp", (DL_FUNC) &_hsbm_safe_exp, 1},
    {"_hsbm_my_sampler", (DL_FUNC) &_hsbm_my_sampler, 1},
    {"_hsbm_sample_index", (DL_FUNC) &_hsbm_sample_index, 1},
    {"_hsbm_rgamma_vec", (DL_FUNC) &_hsbm_rgamma_vec, 1},
    {"_hsbm_rbeta_vec", (DL_FUNC) &_hsbm_rbeta_vec, 2},
    {"_hsbm_rdirichlet", (DL_FUNC) &_hsbm_rdirichlet, 1},
    {"_hsbm_gem_gibbs_update", (DL_FUNC) &_hsbm_gem_gibbs_update, 3},
    {"_hsbm_get_up_freq", (DL_FUNC) &_hsbm_get_up_freq, 1},
    {"_hsbm_find_tunc", (DL_FUNC) &_hsbm_find_tunc, 2},
    {"_hsbm_fast_agg", (DL_FUNC) &_hsbm_fast_agg, 3},
    {"_hsbm_get_freq", (DL_FUNC) &_hsbm_get_freq, 2},
    {"_hsbm_get_freq_minus_self", (DL_FUNC) &_hsbm_get_freq_minus_self, 2},
    {"_hsbm_comp_blk_sums", (DL_FUNC) &_hsbm_comp_blk_sums, 3},
    {"_hsbm_sp_compress_col", (DL_FUNC) &_hsbm_sp_compress_col, 3},
    {"_hsbm_sp_single_col_compress", (DL_FUNC) &_hsbm_sp_single_col_compress, 4},
    {"_hsbm_comp_blk_sums_and_sizes", (DL_FUNC) &_hsbm_comp_blk_sums_and_sizes, 4},
    {"_hsbm_iter_over_sp_mat", (DL_FUNC) &_hsbm_iter_over_sp_mat, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_hsbm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
